{"version":3,"file":"static/js/442.cf7a9c4e.chunk.js","mappings":"sQACA,GAAgB,UAAY,wBAAwB,UAAY,wBAAwB,MAAQ,qB,mBCM1FA,EACE,OADFA,EAEK,UAFLA,EAGM,WAHNA,EAIM,WAGCC,EAAO,WAClB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAASF,GAArC,eAAOK,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAyBR,OAvBAE,EAAAA,EAAAA,YAAU,YACR,iBAAC,yFACMF,EADN,wDAICD,EAAUN,GAJX,mBAM0BU,EAAAA,EAAAA,IAAgBH,GAN1C,oBAMWI,EANX,EAMWA,MAEER,KAAKS,OARlB,wBASKN,EAAUN,GACVI,EAAQ,IAVb,kBAWYS,EAAAA,GAAAA,KAAW,mBAXvB,QAaKP,EAAUN,GACVI,EAAQO,EAAKR,MAdlB,0DAiBGG,EAAUN,GAjBb,yDAAD,EAoBD,GAAE,CAACO,IAECJ,GAAQE,IAAWL,EAInBG,GAAQE,IAAWL,EAGnBG,GAAQE,IAAWL,EAIpBG,GAAQE,IAAWL,GAEnB,iCACE,kCACA,eAAIc,UAAWC,EAAAA,UAAf,SACGZ,EAAKa,KAAI,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,GAAIC,EAAlB,EAAkBA,cAAeC,EAAjC,EAAiCA,aAAjC,OACR,gBAAaN,UAAWC,EAAAA,UAAxB,UACGK,IACC,gBACEN,UAAWC,EAAAA,WACXM,MAAM,MACNC,IACE,yCAAkCF,GAAlC,yCACsCA,GAClC,EAENG,IAAKJ,KAGT,iBAAKL,UAAWC,EAAAA,MAAhB,WACE,cAAGD,UAAWC,EAAAA,UAAd,SAA4BI,KAC5B,cAAGL,UAAWC,EAAAA,eAAd,SAAiCE,SAf5BC,EADD,cALlB,EAHSL,EAAAA,GAAAA,KAAW,UAHX,SAACW,EAAA,EAAD,KAJA,uBAuCV,C,4MChFKC,EAAU,mCACVC,EAAW,+BAEJC,EAAW,mCAAG,6GAEJC,IAAAA,IAAA,UACdF,EADc,uCACyBD,IAHrB,cAEjBd,EAFiB,yBAKhBA,GALgB,gCAOvBkB,QAAQC,IAAR,MAPuB,yDAAH,qDAWXC,EAAe,mCAAG,WAAMC,GAAN,gGAERJ,IAAAA,IAAA,UACdF,EADc,iCACmBD,EADnB,kBACoCO,EADpC,+CAFQ,cAErBrB,EAFqB,yBAKpBA,GALoB,gCAO3BkB,QAAQC,IAAR,MAP2B,yDAAH,sDAWfG,EAAe,mCAAG,WAAM1B,GAAN,gGAERqB,IAAAA,IAAA,UACdF,EADc,kBACInB,EADJ,oBACuBkB,EADvB,oBAFQ,cAErBd,EAFqB,yBAKpBA,GALoB,gCAO3BkB,QAAQC,IAAR,MAP2B,yDAAH,sDAWfpB,EAAe,mCAAG,WAAMH,GAAN,gGAERqB,IAAAA,IAAA,UACdF,EADc,kBACInB,EADJ,4BAC+BkB,EAD/B,oBAFQ,cAErBd,EAFqB,yBAKpBA,GALoB,gCAO3BkB,QAAQC,IAAR,MAP2B,yDAAH,sDAWfI,EAAe,mCAAG,WAAM3B,GAAN,gGAERqB,IAAAA,IAAA,UACdF,EADc,kBACInB,EADJ,4BAC+BkB,EAD/B,2BAFQ,cAErBd,EAFqB,yBAKpBA,GALoB,gCAO3BkB,QAAQC,IAAR,MAP2B,yDAAH,qD","sources":["webpack://react-homework-template/./src/pages/Cast/Cast.module.css?cfbb","pages/Cast/Cast.jsx","services/API.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cast_list\":\"Cast_cast_list__2-Taf\",\"cast_item\":\"Cast_cast_item__QVL5J\",\"inner\":\"Cast_inner__m+0VI\"};","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovie小redits } from '../../services/API';\nimport { toast } from 'react-toastify';\nimport s from '../Cast/Cast.module.css';\nimport { Loader } from 'components/Loader';\n\nconst Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n\nexport const Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [status, setStatus] = useState(Status.IDLE);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    (async () => {\n      if (!movieId) {\n        return;\n      }\n      setStatus(Status.PENDING);\n      try {\n        const { data } = await getMovie小redits(movieId);\n\n        if (!data.cast.length) {\n          setStatus(Status.REJECTED);\n          setCast([]);\n          return toast.warn('No information');\n        } else {\n          setStatus(Status.RESOLVED);\n          setCast(data.cast);\n        }\n      } catch {\n        setStatus(Status.REJECTED);\n      }\n    })();\n  }, [movieId]);\n\n  if (!cast && status === Status.IDLE) {\n    return <></>;\n  }\n\n  if (!cast && status === Status.PENDING) {\n    return <Loader/>;\n  }\n  if (!cast && status === Status.REJECTED) {\n    return toast.warn('Error');\n  }\n\n  if (cast && status === Status.RESOLVED) {\n    return (\n      <>\n        <h2>Cast</h2>\n        <ul className={s.cast_list}>\n          {cast.map(({ character, id, original_name, profile_path }) => (\n            <li key={id} className={s.cast_item}>\n              {profile_path && (\n                <img\n                  className={s.cast_image}\n                  width=\"120\"\n                  src={\n                    `https://image.tmdb.org/t/p/w500${profile_path}`\n                      ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                      : 'no image'\n                  }\n                  alt={original_name}\n                />\n              )}\n              <div className={s.inner}>\n                <p className={s.cast_name}>{original_name}</p>\n                <p className={s.cast_character}>{character}</p>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </>\n    );\n  }\n};","import axios from 'axios';\n\nconst API_KEY = '5787548457546c05a58e27934de5db16';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const getTrending = async () => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getSearchMovies = async query => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieDetails = async movieId => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovie小redits = async movieId => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieReviews = async movieId => {\n  try {\n    const data = await axios.get(\n      `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};"],"names":["Status","Cast","useState","cast","setCast","status","setStatus","movieId","useParams","useEffect","getMovie小redits","data","length","toast","className","s","map","character","id","original_name","profile_path","width","src","alt","Loader","API_KEY","BASE_URL","getTrending","axios","console","log","getSearchMovies","query","getMovieDetails","getMovieReviews"],"sourceRoot":""}